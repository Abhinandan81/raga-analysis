{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(rsconnect)\nlibrary(tools) #for checking file extension\nlibrary(tuneR)\nlibrary(seewave)\nlibrary(dplyr)\nlibrary(tidyr)\n\n\nshinyServer(function(input, output){\n  \n  #------- START: reactive function to detect the file upload change -------#\n  getRagaFile <- reactive({\n    \n    #storing the uploaded file\n    ragaFile <- input$raga_file\n    \n    #If recived file is empty return NULL\n    if (is.null(ragaFile)){\n      return(NULL)\n    }else{\n      \n      #validating the file type - application will throw an error if fle type is other than .wav or .mp3\n      validate(\n        need(file_ext(ragaFile$name) %in% c(\n          'wav',\n          'mp3'\n        ), \"Please provide valid .wav or .mp3 file.\"))\n      \n      if(file_ext(ragaFile$name) == \"mp3\"){\n        #changing file name in the temporary direcctory\n        file.rename(ragaFile$datapath, paste(ragaFile$datapath, \".mp3\", sep=\"\"))\n        \n        loadedFile <- readMP3(paste(ragaFile$datapath, \".mp3\", sep=\"\"))  ## MP3 file in working directory\n        \n        tdir <- tempdir()\n        tfile <- file.path(tdir, \"wavFile.wav\")\n        writeWave(loadedFile, filename = tfile)\n        \n        newWobj <- readWave(tfile)\n        file.remove(tfile)\n        \n        return(newWobj)\n        \n      }else{\n        #changing file name in the temporary direcctory\n        file.rename(ragaFile$datapath, paste(ragaFile$datapath, \".wav\", sep=\"\"))\n        \n        newWobj <- readWave(paste(ragaFile$datapath, \".wav\", sep=\"\"))\n\n        return(newWobj)\n        \n      }\n    }\n  })\n  \n  #------- END: reactive function to detect the file upload change -------#\n  \n  output$fileDetails <- renderText({\n               wavFile <- getRagaFile()\n               \n               if(is.null(wavFile)){\n                 return(NULL)\n               }else{\n                 \n                 #converting sterio channels to mono\n                 monoWave <- mono(wavFile, \"left\")\n              \n                 #--------  START : MFCC feature extraction  -------#\n                 melfc_data <- melfcc(monoWave, sr = monoWave@samp.rate, wintime = 0.025,\n                                      hoptime = 0.01, numcep = 12, lifterexp = 0.6, htklifter = FALSE,\n                                      sumpower = TRUE, preemph = 0.97, dither = FALSE, usecmp = FALSE,\n                                      modelorder = NULL, spec_out = FALSE, frames_in_rows = TRUE)\n                 \n                 #defining column names for the melfc_data\n                 melfc_data_colname <- c(\"coef_01\", \"coef_02\", \"coef_03\", \"coef_04\", \"coef_05\", \"coef_06\", \"coef_07\", \"coef_08\", \"coef_09\", \"coef_10\", \"coef_11\", \"coef_12\")\n\n                 #assigning the column names to the melfc_data\n                 colnames(melfc_data) <-  melfc_data_colname                \n                 \n                 #convert melfc_data vetor to the melfc_data_frame\n                 melfc_data_frame <- data.frame(melfc_data)\n                 \n                 print(\"-*-*-* melfc_data_frame-**-*-* \")\n                 print(str(melfc_data_frame))\n                 #--------  END : MFCC feature extraction  -------#\n                 \n                 #--------  START : Zero crossing rate feature extraction  -------#\n                 \n                 #extracting the Zero crossing rate feature\n                 zcr_data <- zcr(monoWave, wl = 512, ovlp = 0, plot = FALSE)\n                 \n                 #converting the zcr_data matrix to the data frame(data frame is having two columns: time and zcr)\n                 zcr_data_frame <- as.data.frame(zcr_data)\n                 \n                 print(\"-*-*-* zcr_data frame-**-*-* \")\n                 print(str(zcr_data_frame))\n                 #--------  END : Zero crossing rate feature extraction  -------#\n                 \n                 return(zcr_data)\n               }\n              \n  })\n})",
    "created" : 1490713381456.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3490681428",
    "id" : "DBF0D4F6",
    "lastKnownWriteTime" : 1490895951,
    "last_content_update" : 1490895951773,
    "path" : "~/dev/shiny-apps/raga-analysis/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}